name: Build shared FFmpeg for multiple platforms
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y yasm pkg-config build-essential curl
      - name: Download FFmpeg
        run: |
          FF_VERSION=6.1
          curl -L https://ffmpeg.org/releases/ffmpeg-$FF_VERSION.tar.gz | tar xz
          mv ffmpeg-$FF_VERSION ffmpeg
      - name: Configure & Build
        run: |
          cd ffmpeg
          ./configure --prefix=$PWD/build --enable-shared --disable-static --disable-debug --disable-doc --disable-programs
          make -j$(nproc)
          make install
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-linux-x86_64
          path: ffmpeg/build

  build-macos-arm64:
    runs-on: macos-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: brew install yasm pkg-config
      - name: Download FFmpeg
        run: |
          FF_VERSION=6.1
          curl -L https://ffmpeg.org/releases/ffmpeg-$FF_VERSION.tar.gz | tar xz
          mv ffmpeg-$FF_VERSION ffmpeg
      - name: Configure & Build
        run: |
          cd ffmpeg
          ./configure --prefix=$PWD/build --enable-shared --disable-static --disable-debug --disable-doc --disable-programs --arch=arm64 --cpu=apple-a14
          make -j$(sysctl -n hw.ncpu)
          make install
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-macos-arm64
          path: ffmpeg/build

  build-ios-arm64:
    runs-on: macos-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Setup iOS SDK
        run: |
          export DEVELOPER=$(xcode-select -print-path)
          export SDKROOT=$(xcrun --sdk iphoneos --show-sdk-path)
          export CC=$(xcrun --sdk iphoneos -f clang)
          export CFLAGS="-arch arm64 -isysroot $SDKROOT"
          export LDFLAGS="-arch arm64 -isysroot $SDKROOT"
      - name: Download FFmpeg
        run: |
          FF_VERSION=6.1
          curl -L https://ffmpeg.org/releases/ffmpeg-$FF_VERSION.tar.gz | tar xz
          mv ffmpeg-$FF_VERSION ffmpeg
      - name: Configure & Build for iOS
        run: |
          cd ffmpeg
          ./configure --prefix=$PWD/build-ios --enable-shared --disable-static --disable-debug --disable-doc --disable-programs --target-os=darwin --arch=arm64 --cc="$CC" --sysroot="$SDKROOT" --extra-cflags="$CFLAGS" --extra-ldflags="$LDFLAGS"
          make -j$(sysctl -n hw.ncpu)
          make install
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-ios-arm64
          path: ffmpeg/build-ios

  build-android-arm64:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
      - name: Download FFmpeg
        run: |
          FF_VERSION=6.1
          curl -L https://ffmpeg.org/releases/ffmpeg-$FF_VERSION.tar.gz | tar xz
          mv ffmpeg-$FF_VERSION ffmpeg        
      - name: Configure & Build for Android
        run: |
          export NDK=$ANDROID_NDK_HOME
          export TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/linux-x86_64
          export TARGET=aarch64-linux-android
          export API=24
          
          export CC=$TOOLCHAIN/bin/${TARGET}${API}-clang
          export CXX=$TOOLCHAIN/bin/${TARGET}${API}-clang++
          export AR=$TOOLCHAIN/bin/llvm-ar
          export NM=$TOOLCHAIN/bin/llvm-nm
          export STRIP=$TOOLCHAIN/bin/llvm-strip
          export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
          
          export SYSROOT=$TOOLCHAIN/sysroot
          export CFLAGS="-fPIC"
          export LDFLAGS="-fPIC -fuse-ld=lld"
          
          cd ffmpeg
          ./configure \
            --prefix=$PWD/build-android \
            --enable-cross-compile \
            --target-os=android \
            --arch=aarch64 \
            --cross-prefix=$TOOLCHAIN/bin/${TARGET}- \
            --sysroot=$SYSROOT \
            --cc=$CC \
            --cxx=$CXX \
            --ar=$AR \
            --nm=$NM \
            --ranlib=$RANLIB \
            --strip=$STRIP \
            --enable-shared \
            --disable-static \
            --disable-debug \
            --disable-doc \
            --disable-programs \
            --extra-cflags="$CFLAGS" \
            --extra-ldflags="$LDFLAGS" \
            --cpu=armv8-a
          make -j$(nproc)
          make install

      - name: Upload config.log on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: ffbuild-config-log
          path: ffmpeg/ffbuild/config.log
  

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-android-arm64
          path: ffmpeg/build-android

  build-windows-x86_64:
    runs-on: windows-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup MSYS2 with required tools
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-yasm
            mingw-w64-x86_64-nasm
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-binutils
            diffutils
            make

      - name: Create symlinks for missing tools
        shell: msys2 {0}
        run: |
          cd /mingw64/bin
          ls -la
          ln -s x86_64-w64-mingw32-gcc-nm.exe x86_64-w64-mingw32-nm.exe
          ln -s x86_64-w64-mingw32-gcc-ar.exe x86_64-w64-mingw32-ar.exe
          ln -s x86_64-w64-mingw32-gcc-ranlib.exe x86_64-w64-mingw32-ranlib.exe
          ln -s strip.exe x86_64-w64-mingw32-strip.exe
          ln -s dlltool.exe x86_64-w64-mingw32-dlltool.exe
          ls -la x86_64-w64-mingw32-*.exe

      - name: Build FFmpeg for Windows
        shell: msys2 {0}
        run: |
          echo "PATH: $PATH"

          FF_VERSION=6.1
          curl -L https://ffmpeg.org/releases/ffmpeg-$FF_VERSION.tar.gz | tar xz
          mv ffmpeg-$FF_VERSION ffmpeg
          cd ffmpeg

          ./configure \
            --prefix=$PWD/build \
            --cross-prefix=x86_64-w64-mingw32- \
            --target-os=mingw32 \
            --arch=x86_64 \
            --enable-shared \
            --disable-avdevice \
            --disable-static \
            --disable-debug \
            --disable-doc \
            --disable-programs

          make -j$(nproc)          
          make install
          ls -la
          ls -la build/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-windows-x86_64
          path: ffmpeg/build

  release:
    # SÃ³lo corre si el ref es un tag
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build-linux
      - build-macos-arm64
      - build-ios-arm64
      - build-android-arm64
      - build-windows-x86_64
    runs-on: ubuntu-latest
    steps:
      - name: Descargar artifacts de Linux
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-linux-x86_64
      - name: Descargar artifacts de macOS ARM64
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-macos-arm64
      - name: Descargar artifacts de iOS ARM64
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-ios-arm64
      - name: Descargar artifacts de Android ARM64
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-android-arm64
      - name: Descargar artifacts de Windows x86_64
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-windows-x86_64

      - name: Crear release en draft y subir todos los artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: true
          files: |
            ffmpeg-linux-x86_64/**
            ffmpeg-macos-arm64/**
            ffmpeg-ios-arm64/**
            ffmpeg-android-arm64/**
            ffmpeg-windows-x86_64/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}